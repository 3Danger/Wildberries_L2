package main

import (
	"Front/src/Animal"
	"Front/src/Job"
	"sync"
)

/*
	Реализовать паттерн «фасад».
	Объяснить применимость паттерна, его плюсы и минусы,
	а также реальные примеры использования данного примера на практике.
*/

/*
	Фасад позволяет скрыть сложные части подсистемы,
	давая доступ только к необходимым рычагам,
	тем самым упрощая использование системы для клиента,

Преимущества:
	* Изолирует клиентов от компонентов сложной подсистемы.
Недостатки:
	* Фасад рискует стать божественным объектом, привязанным ко всем классам программы.
		Божественный_объект - описывающий объект, который хранит в себе «слишком много» или делает «слишком много».
*/

//DoIt Это наш супер фасад
func DoIt() {
	wg := sync.WaitGroup{}
	wg.Add(3)

	//DoItWork Это наш фасад найма на работу, и начала работы
	go Job.DoItWork(&wg, Job.NewDancerJob(), Animal.NewElephant())
	go Job.DoItWork(&wg, Job.NewLoaderJob(), Animal.NewBull())
	go Job.DoItWork(&wg, Job.NewPosterJob(), Animal.NewMonkey())
	wg.Wait()
}

func main() {
	DoIt()
}
